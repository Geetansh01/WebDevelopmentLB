/******************Week 1*************************/
    L18 : HTML Basics
          1)HTML, Tags, comments
          2)HTML Text Element
                1)Block Element
                2)Inline Element
          3)Heading Tag
          4)paragraph Tag
          5)DIV tag
          6)Empty tag/ Self closing tag (eg: <br/> tag)
          7)List in HTML
                1)Ordered List
                2)Unordered List
                3)Description List
          8)Attributes in html Tags
          9)meta tag

/**********************CWH Starts*****************************/
/********Tut 1**************/
      1)Basic OverView
      2)FrontEnd
            -HTML
            -CSS
            -JavaScript
      3)FrontEnd FrameWorks to deploy JavaScript Quickly and Efficiently
            -React
            -NextJS
            -Angular
      3)BackEnd
            -django
            -flask
            -Node.js
            -php
            -ruby on rails

/********Tut 3**************/
      How to view websites on your phone

/********Tut 5**************/
      1)Image Tag
            1)For the attribute of height & width, always set either 1 of them and the other will automatically adjust. 
            These will be later finetuned by css but setting 1 of them in html helps in reducing CLS (so better SEO).
            2)Values of width & height Attributes are in pixels 
      2)Table tag

/********Tut 6**************/
      1) 3 SEO Web Vitals
            -CLS (Cumulative layout Shift) 
            -LCD (Largest Contentful Paint) 
            -FID (First Input Delay)
            ref : https://web.dev/articles/vitals
            1)LightHouse Report

/********Tut 7**************/
      2)form tag

/********Tut 8**************/
      1)Inline and block Elements

/********Tut 9**************/
      1)Id & Class attributes 

/********Tut 10**************/
      2)audio, video, svg, iframe tags

/********Tut 11**************/
      Semantic tags

/********Tut 13**************/
      Exercise

/********Tut 13**************/
      1)HTML Entities
            &nbsp;
            &copy; etc..
      2)pre tag
      3)code tag

/********Tut 14**************/
      CSS starts
      1)style tag
      2)selectors

/********Tut 15**************/
      3 ways to add css to your HTML :
      1)Inline CSS
            -using style attribute
      2)Internal
      3)External

/********Tut 17**************/
      Selectors in CSS:
      1)Element Selector
      2)Class selector
      3)ID selector
      4)Child Selector
      5)Descendant Selector
      6)Universal Selector
      7)Pseudo Selector (pseudo class in CSS)
      8)attribute selector (Srch online)
      9)Pseudo-element selector (see Tut35)

/********Tut 18**************/
      CSS Box Model:
      1)Element, Padding, border, margin
      Tip: 1)Always set "box-sizing" to "border-box" to lay out elements. 
      This makes dealing with the sizes of elements much easier
      2)Margin collapse only happens to block elements

/********Tut 19**************/
      1)Fonts in CSS
            1)font-family - fallback fonts {Recommended to include a generic Font Family like "Times New Roman" Family}
            2)font-style, font-weight, font-size etc...
      2)Different text properties :
            1)text-decoration, text-transform, text-decoration-color etc.
            2)overflow, text-overflow, word-break etc.
            3)text-align etc.
      3)Google Fonts (https://fonts.google.com/)
      4)Colors in CSS
            Ways to represent colors in css
                  -color keywords
                  -HEX color codes
                  -RGB 
                  -RGBA
                  -HSL

/********Tut 20**************/
      Exercise

/********Tut 21**************/
      1)CSS Specificity and Cascade
            1)Cascade Algorithm : 
                  The cascade algorithm has 4 distinct stages : 
                  1)Position and order of appearance : for use when same types of selectors in conflict
                  2)Specificity: for use when different types of selectors in conflict
                        Order of specificity is:
                        Inline Style > ID Selector > Class or Attribute Selector > Element Selector > Universal Selector

                        Tip : 
                        1)Use the least specific selectors more often to style your HTML. That way you can easily override specific styles when needed with more specific selectors. 
                        2)As a consequence of Tip 1), you should use !important v.very sparingly in your code (as it would make debugging difficult)
                        3)To calculate specificity, assign a value to each part of the selector:

                              -Universal Selector: 0
                              -Element selectors and pseudo-elements: 1
                              -Class selectors, attribute selectors, and pseudo-classes: 10
                              -ID selectors: 100
                              -Inline styles: 1000
                              -!important : 10,000
                        Then, add up the values of all the parts in the selector.

                  3)Origin
                  4)Importance: some CSS rules are weighted more heavily than others, especially with the " !important " rule type

/********Tut 22**************/
      1)Measurement Units in CSS
            1)px 
            2)vw, vh
            3)em
            4)rem (root element : html)
            5)vmin, vmax
            6)% units (width: 50%; means 50% the width of parent element)
      2)min-height, min-width, max-height, max-width

/********Tut 23**************/
      CSS Display Properties:
      1)U can set "display: " style as:
            1)inline (To make block elements inline)
            2)inline-block

                  Tip : 1)Inline elements don't respect Top padding and Top margin. Use "inline-block" for that.
                  2)Inline elements don't respect width. Use "inline-block" for that.

            3)none
            4)flex (More details in flex-box Tutorial)
            5)grid
      2)visibility

/********Tut 24**************/
      1)Box Shadow syntax: " box-shadow: h-offset v-offset blur spread color inset; "
      2)Text Shadow syntax: " text-shadow: h-offset v-offset blur color; "
      3)outline, outline-offset
      4)border-radius

/********Tut 25**************/
      1)list styling using CSS
            Tip : 1)" list-style: " can make a ul list look like ol
                  2)A li will have the following display property
                        " display: list-item; "
                  This gives the li a "marker" and "text"
            
            1)list-style, list-style-position, list-style-type, list-style-image 
              (There was also a shorthand syntax!)
      2)Basic nav bar (Navigation bar)
      
/********Tut 26**************/
      1)More on CSS overflow
      2)overflow-x, overflow-y etc.
      3)white-space: nowrap;

/********Tut 29**************/
      Exercise

/********Tut 28**************/
      Position in CSS
      1)position : relative, absolute, static
      2)position : absolute; 
        Tip: 1)Element will find it's nearest positioned parent (means any position except static position) and sit relative to it (in worst case, it sits relative to <html> element)
             2)WARNING : transform, filter, or perspective properties can also make an element appear as positioned 
      3)position : fixed (Used for Annoying ADs)
      3)position : sticky (Used for Nav Bar)

/**********Tut30************/
      Variables in CSS
      1):root{
            --color : rgb(195, 2, 195);
            --seccolor : rgb(179, 107, 179);
            etc...
        }
      Tip : Use this to quicly change the theme of website by setting GLOBAL variables (Say for primary and secondary colors)

/**********Tut31************/
      Media Queries in CSS
      1)Syntax : 
            @media not|only mediatype and (expressions) {
                  CSS-Code;
            }
      2)Most Common usage: 
            @media only screen and (max-width : 400px) {
                  CSS-Code;
            }       

/**********Tut34************/
      Exercise

/**********Tut34************/
      Float & Clear in CSS
      1)Flex-box has mostly reduced the usage of these styles today.
      2)float: right; (use "display: flow-root;" with container of floating element to account for overflow of floating element)
      3)clear: right/left/both

      Tip: Don't use float and clear 😂

/**********Tut35************/
      More on CSS Selectors
      1)pseudo-element Selector ( p::first-line{...}, ::selection, input::placeholder )
      2)One more way to use universal selector ( .boxes *{...} )
      3)Grouping Selectors("," separated)
      4).box:nth-child(odd), .box:nth-last-child(1) etc.
      5)Inserting pseudo-elements dynamically using CSS
            1)	.boxes::before{
				content: "Befooooooooooooooooooooooooore";
				background-color: blanchedalmond;
			}

                  This will insert pseudo-element before the main content of ".boxes"
            2).boxes::after{...}
      6).box::selection
      7)input tag

/**********Tut37************/
      Exercise

/**********Tut38************/
      CSS Flex Box
      1)Container Properties (Applied on the parent container containing the items) :
            1)To align elements in the centre, set the following styles to the " parent container "
                  display: flex;
                  justify-content: center;
                  align-items: center;
            
            Tip: Most of the times u will use Flex box to align in centre 😉

            2)Other options:
                  justify-content: flex-end, flex-start, space-between, space-around etc.
                  align-items: flex-start, flex-end,  etc.
            3)flex-direction: row, column, row-reverse, column-reverse 
            4)Axes in Flex box(can change depending on " flex-direction "):
                  1)Main Axis : Axis along which items are layed 
                  2)Cross Axis : Axis perpendicular to direction in which items are layed
            
            " justify-content " works along the main axis.
            5)Terminologies: Main start, Main end, Cross start, Cross end, Main size, Cross size
            6)flex-wrap: wrap;
            7)align-content: center; ( When content is wrapping in multiple lines(i.e "flex-direction is row" AND "flex-wrap is wrap" ) and needs to be centered along the Cross Axis).
            
                  Tip: There is NO " justify-items " in flex box 🙂
                  
            8)Shorthand to set "flex-direction" and "flex-wrap" :
                  flex-flow: <flex-direction> <flex-wrap>
                  eg. flex-flow: row wrap;
            9)gap, row-gap, col, column-gap
      
      2)Item Properties:
            1)order (jitna zyada order utna baad me element aega, default order is 0)
            2)flex-grow (Basically to fill the remaining space on the main axis)
            3)flex-shrink
            4)align-self

/**********Tut39************/
      CSS Grid
      1)Container Properties (Applied on the parent container containing the items) :
            1)grid-template-columns
                  Tip: 1)Insted of writing " grid-template-columns: 1fr 1fr 1fr ", write "grid-template-columns: repeat(3, 1fr); "
                  2)minmax(x, y) : a general function, multiple uses throughout CSS
            2)Terminologies : 
                  1)grid line, grid cell
                  2)grid track, grid area
                  3)grid-template-rows, grid-template-cloumns
            3)naming grid lines
            4)Two major ways to use grid:
                  1)Using grid rows and columns (and then placing items in the cells)
                  2)using grid areas
            5)fr (a unit, full form : fraction)
            6)gap, row-gap, column-gap
                  Tip: Don't use padding/ margin in flexbox or grid, use gap instead ✌
            7)justify-items (for horizontal), align-items (for vertical)
                  Tip: 1)shorthand: "place-items: center;" means "justify-items: center;" && "align-items: center;"😊 
            8)justify-content, align-content 
                  1)These are used to arrange the whole grid inside the grid container (rather than arranging the items inside the grid which is done by "justify-items", "align-items")
                  2)Useful when grid is smaller than the container containing the grid
                  4)shorthand: "place-content: center;" means "justify-content: center;" && "align-content: center;"    
                    similarly "place
      
      2)Item Properties:
            1)"grid-row-start: 1;"," grid-row-end: 2;", (Shorthand is " grid row: 1/2; ")
            2)grid-column-start, grid-column-end (shorthand is "grid column")
            3)align-self, justify-self (these apply to individual items in contrast to "align-items" and "justify-items" which apply to all the items in the grid)

/**********Tut41************/
      Exercise

/**********Tut42************/
      CSS Transforms
      1)transform: rotate(45deg) ( or rotate(0.25 turn) )
                                 ( or rotateX(45deg) similarly y and z axis)
      2)scale(1.2) (scaleX, similarly for y and z axis)
      3)skew(), skewX() (similarly skewY()) 
            Tip: NO skewZ() is there ❌
      4)translateX(100%) (100% means 100% of the width of the element on which translate is applied and NOT the width of parent!)
      5)Multiple transforms in one { transform: rotate(0.25turn) skewX(10deg) translateX(100%); }
      6)transform-origin

/**********Tut44************/
      Exercise

/**********Tut45************/
      CSS Transition property
      1)4 Different parts:
            transition-property: transform;
            transition-duration: 4s;
            transition-timing-function: ease-in-out;
            transition-delay: 1s;
      
      2)Shorthand to combine above 4
            transition: transform 4s ease-in-out 1s;

/**********Tut46************/
      CSS Animations
      1)Two synatxes to set keyframes of animation:
            1)
        @keyframes GeetanshKiAnimation{
            from{
                background-color: rgb(255, 0, 153);
            }
            to{
                background-color: blue;
                transform: translateX(1000px);
            }
        }

            2)
        @keyframes Animation2 {
            0%{
                transform: rotate(0deg);
            }
            20%{
                transform: rotate(90deg);
            }
            40%{
                transform: rotate(180deg);
            }
            60%{
                transform: rotate(270deg);
            }
            80%{
                transform: rotate(360deg);
            }
            100%{
                transform: rotate(0deg);
            }
        }

      2)There are many different properties for animation, like:
            animation-name: geetanshKiAnimation;
            animation-duration: 1s;
            animation-iteration-count: 2;
            animation-timing-function: ease-in-out;
            animation-delay: 1s;
            animation-direction: normal; (or alternate, reverse etc.)
            animation-play-state: paused; (We actually use JS to pause our Animations)
            animation-fill-mode: forwards; (used rarely 😁)


      3)Shorthand for above properties:
               animation: name duration timing-function delay iteration-count direction fill-mode;

      4)To apply multiple comma separated animation using shorthand:
                  animation: GeetanshKiAnimation 4s ease-in-out 1s infinite,
                             Animation2 4s ease-in-out 1s infinite;

/**********Tut48************/
      Exercise

/**********Tut49************/
      CSS Object fit and Object Cover
      1)object-fit: 
            -cover (Most Used)
            -contain (Most Used)
            -none
            -fill (default)
      2)object-position: 
            which part of image to show when unable to see full image:
                  -bottom left
                  -top right
                  -left etc.
                  -50% 50%
            
            Setting image's position whithin it's space
                  -10px 20px (right, top)

            Tip : use this with " object-fit: cover OR none" for desired effect 😊
      3)If you want to set image as a background (this also prevents noobs from being able to download the image 🤓)
            background: url( "Image URL Here" );
            background-position: top left; (top left means top left part of the image will be visible as background : useful when the entire image is too large)

            background-repeat: no-repeat; (or repeat-x, repeat-x)
            (when the image is small, it is repeated to fill the background, use this property to control that)

            background-clip: content-box; (OR border-box, padding-box)

/**********Tut 50************/
      CSS Filters
      
      You can apply these styles on different html elements:
      1)blur(10px)
      2)grayscale(10%)
      3)opacity(1) [0 to 1, 1 being fully visible]
       etc.
      4)combining multiple Filters
            filter: grayscale(10%) brightness(20%);

/**********Tut 52************/
      Figma Intro Basic

/**********Tut 53************/
      Netflix Clone (Exercise)

      New Things used:
      1)background-size: cover;
      2)changing color of svg (fill="red" inside the .svg file)

      Tip: 1)The favicon when stored in Tut53 (i.e the same directory where index.html is stored i.e the entry point of our website i.e the root directory of our website) is picked automatically by ALL other browsers (without any kind of linking being done via code) (when website is hosted using live server extension of VS-code) BUT NOT edge 😞
      (This might be corrected in future edge updates)

           2)For this to work, VS-code should be opened in Tut53, this means live server extension will treat TUT53 as the root directory of our website.
      
/**********Tut 54************/
      JavaScript Starts
      1)JS is a client side scripting language to make webpages interactive. 
      2)JS is a Dynamically typed language.
      2)U can use Node.js to script backend using JavaScript
      3)Ways to add JS to your html:
            1)inline (using <style> tag)
            2)external 
      2)Some JS functions
            1)alert()
            2)console.log("...") -->useful for debugging
            3)prompt("Enter Ur Name : ")
      
      About Node.js
      1)This is the run-time environment for JavaScript
            1)A nice SO answer on "What is run time environment?" (ref: https://stackoverflow.com/questions/3710130/what-is-run-time-environment):
                  Distinguish this from Development Environments and Build Environments.

                  You will tend to find a hierarchy here.

                  Run time environment - Everything you need to execute a program, but no tools to change it.

                  Build environment- Given some code written by someone, everything you need to compile it or otherwise prepare an executable that you put into a Run time environment. Build environments are pretty useless unless you can see tests what you have built, so they often include Run too. In Build you can't actually modify the code.

                  Development environment - Everything you need to write code, build it and test it. Code Editors and other such tools. Typically also includes Build and Run.
                  
      2)Node.js 's javascript engine is derived from chrome's V8 engine (a JavaScript engine )
            1)A JavaScript engine is simply a computer program that interprets JavaScript code. The engine is responsible for executing the code.
      3)Some functions (like alert() etc..) are available only in browsers and thus a JS code containing these would throw error when being run by Node.js
      
/**********Tut 55************/
      Variables in JavaScript
      1)Naming Rules for variables
            -Letters, digits, underscores, $ sign allwed
            -Must begin with $, _ or Letters
            -Case Senssitive (num & Num are different)
            -JS reserved words can not be used
      2)3 types of variables in JS :
            1)var
                  -It is globall scoped
                  
                  Tip: mostly we will not use a "var" in our code but use "let" & "const"
            2)let
                  -It is local scoped
                  -If you declare it outside of all blocks then it will be global
            3)const
                  -It is local scoped
      3)Primitive DataTypes in JS:
            -null : This data type can hold only one possible value that is null
                    "typeof" will give the datatype of a null variable as "object" (Historical Reasons)
            -number
            -boolean
            -string
            -symbol
            -undefined :  The meaning of undefined is ‘value is not assigned’
            -BigInt : This data type can represent numbers greater than 2^53-1 which helps to perform operations on large numbers. 
                      The number is specified by writing ‘n’ at the end of the value

      4)Non-Primitive DataTypes in JS
            1)Objects
                  -An object is a collection of properties.
                   And a property is a <key : value> pair
                  -A property's value can be a function, in which case the property is known as a method
                  -Example:

                        const obj = {
                              property1: <value1>, // property name may be an identifier
                              2: <value2>, // or a number
                              "property n": <value3>, // or a string
                        };
            
            Tip: ';' is optional in JS but it's a good idea to use it to mark end of statement

/**********Tut 56************/
      1)Selection Structure in JS (Conditionals like if-else etc..)
      2)Arithmetic operators in JS 
            1)=== : to compare value and type

                  console.log(3 == "3"); //gives true
                  console.log(3 === "3"); //gives false

            2)etc..
      3)REPL (Read Evaluate Print Loop of JS)

/**********Tut 57************/
      Loops in JS
      1)for Loop
      2)for in loop : to loop through the keys of an object

            let person = {
            name: "Geetansh",
            "Running Speed": 20,
            weight: 60,
            height: 181
            };

            // for in loop
            for (const key in person) {
                  if (Object.hasOwnProperty.call(person, key)) {
                        console.log(key, person[key]);
                  }    
            }

            1)Here, The "hasOwnProperty()" method of Object instances returns a boolean indicating whether this object has the specified property as its own property (as opposed to inheriting it).
            2)Removing this if() statement would result in all the properties of the object being printed.
             
      3)for of loop : to iterate an iterable data structure like arrays, strings
      4)while loop
      5)do while loop

/**********Tut 58************/
      JS functions
      1)Simpe function ex:
            function add(a, b, c = 1){
                  let sum = a + b + c;
                  console.log("Sum is : ", sum);
                  return sum;
            }

      2)arrow function in JS
            1)Used for shorter synatax over traditional functions
            2)Syntax:

                  const myFunction = (param1, param2, ...) => {
                        // function body
                  }

            In the code above, the "myFunction" is the variable that holds the function. You can call the function as "myFunction()" later in your code.

/**********Tut 59***********/
      Exercise: Faulty Calcualator
      Tip: CWH used eval() in his solution but Never use eval() in actual production (Security Reasons) 😨😨

/**********Tut 60***********/
      Strings in JS
      1)Template literals 
            1)Template Literals use back-ticks (``) rather than the quotes ("") to define a string
            2)With template literals, you can use both single and double quotes inside a string
            Ex:

                  // let sentence = "This lion's "nature" is carnivorous by "birth !";  //Unable to write a string that contains double or single quotes {" ", ' '} in the usual manner 

                  let sentence = `This lion's "nature" is carnivorous by "birth !`;  //Prblm solved with "Template literals" 
                  console.log(sentence);

            3)String Interpolation : Template literals provide an easy way to interpolate variables and expressions into strings
            Ex: 

                  let first_name = "Geetansh";
                  let last_name = "Bhardwaj";
                  console.log(`The name is ${first_name} ${last_name}`);
      2)various string functions and properties :
            - .toLowerCase()
              .slice(x,y)  {x index included , y not}
              .replace("<str-to-replace>", "<with-this-str>")
              .trim()
              etc...

                  Tip: Strings in JS are IMMUTABLE, so all of these function can NOT change the original string but you can always make a new one 😉

            - .length etc...

/**********Tut 62***********/
      Exercise : Business Name Generator 

/**********Tut 63***********/
      Arrays in JS
      1)Arrays in JS are MUTABLE 🙌
      2)Can hold a mix of different data types
      3)Arrays in JS are not primitive data types but "Array" Objects (So, they also have associated Properties and Functions)
      3)Array Properties:
            - .length
      4)Array Functions:
            - .toString(...)
              .join(...)
              .pop()
              .push()
              .shift() --->pop() ka bhai but from front
              .unshift() --->push() ka bhai but from front
              .sort()
              .forEach((element, index, array)=>{
                  //function body
              })
                  1)Example:
                        let numbers = [1, 2, 3, 4, 5, 6];
                        numbers.forEach((value, index, numbers) => {
                              console.log(value,index,numbers);
                        });

              etc...(Many more, do when required from net 😁)
      
      5)Imp array functions
            1).map(
                  //Arrow Function here
              )
                  1)The map() method of Array instances creates a new array populated with the results of calling a provided function on every element in the calling array.
                  2)Example:
                        let nums = [1, 2, 3, 4, 5, 6];
                        let SquareArray = [];
                        SquareArray = nums.map((element)=>{
                              return element**2;
                        });

            2).filter() : The filter() method of Array instances creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.

            3).reduce() : The reduce() method of Array instances executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. 
            The final result of running the reducer across all elements of the array is a single value.
            
            4)Array.from(...) : The Array.from() static method creates a new, shallow-copied Array instance from an iterable or array-like object.

/**********Tut 65***********/
      Exercise : Factorial 
             
/**********Tut 66***********/
      BOM & DOM in JS
      0)window object
            1)-It is a global object creted by the browser.
              -global means accessible everywhere.
                  eg: You can replace "console.log(...)" with "window.console.log(...)", it's same.
            2)this "window" object represents the browser window (basically everything) and used to control anything within the browser window.
            3)In this window object (i.e as the functions and properties of this window object) lies 3 major things:
                  1)DOM
                  2)BOM
                  3)JS Core 
                  
      1)DOM : Document Object Model
            1)DOM basically apke webpage ki HTML ko (i.e ENTIRE HTML Documnet ko) ek "Object" bna deta hai.
            2)Ye Object represents the HTML Document in a logical tree like structure jisse programming languages and scripting languages (like JS) us Document ke elements ko modify/ manipulate kr pae.
                  eg: Using JS to change the color of any element (in a webpage) comes under DOM.
            3)DOM pure webpage ko ek hierarchial tree like structure bna deta hai (see DOM.jpg)
      
      2)BOM : Browser Object Model
            1)It allows JS to communicate to browser regarding matters other than content of webpage (content of webpage is entirely under DOM)
                  eg: when we use "alert()" to ask the browser to display an alert to the user, this is something other than the content of the webpage & comes under BOM.

      Tip: 1)-In edge, go to : inspect element -> elements tab -> select an element
             -This selected element can now be represented by "$0" and you can interact with it using JS
                  eg: typing " $0.style.backgroundColor = "purple"; " in the console changes the background color of the selected element to purple! 💜💜

/**********Tut 67***********/
      JS DOM - Children, Parent & Sibling Nodes
      1)Walking the DOM : accessing the element (See accompanying index.html)
            1)document.body.childNodes : run this in the edge console to access all the child nodes of "body" 
                  output: NodeList(5) [text, div.container, text, script, text]   ____(1)

                  Tip: "text" in above output refers to any kind of "blank-space" or "newline character" appearing before "div.container". So this "blank-space" or "newline character" is also treated as a child node.

            2)document.body.childNodes[1] : to access the 1st child node ("div.container" acc. to (1) above)
            3)document.body.firstElementChild : To access the first child node that is an element
                  1)So "text" node is ignored and we get "div.container" (acc. to (1) above)
            4)document.body.childNodes[1].style.backgroundColor = "green" : changes the background Color of "div.container" to green (acc. to (1) above)

                  Tip: 1)Instead of repeatedly navigating to the target element, you can use a variable for convenience. So doing the same thing as above :

                        let a = document.body.childNodes[1];
                        a.style.backgroundColor = "green";

                        -Every node is an object so "document.body.childNodes[1]" i.e "div.container" is an object in DOM (typeof(a) gives 'object')
                        -So "a" can now be used to change the properties of "div.container" object

                       2)More Technically, in JS, primitive data-types are "passed by value" and everything else (i.e objects) are "passed by sharing".
                         To read more refer : 
                         1)https://stackoverflow.com/a/38533677/22639449 
                         2)http://dmitrysoshnikov.com/ecmascript/chapter-8-evaluation-strategy/#call-by-sharing (this link given in above SO answer, in case it's not accessible, I archived it as "Archive.pdf" in Tut67 Folder)
            5)<element-name>.parentElement : to get the parent element
            6)<element-name>.nextElementSibling , <element-name>.previousElementSibling etc...
            7)<element-name>.children : to get all those child nodes that are also HTML elements 
                  1)<element-name>.children includes only element nodes. To get all child nodes, including non-element nodes like text and comment nodes, use <element-name>.childNodes.
                  2)<element-name>.children[0] : to access 0th children (i.e 0th child node that is an HTML Element)

                  Tip: We will mostly be concerned with only those Nodes in DOM that are also HTML elements (so text nodes, comment Nodes will be ignored) 😉😉

/**********Tut 68***********/
      Continued - Walking the DOM
      JS - Selecting elements by Ids, Classes, etc. in DOM
            1)document.getElementsByClassName(" <class-name> ")
                  1)if say "box" is the class Name then:
                        document.getElementsByClassName("box")

            2)document.getElementById(" <id> ")
            3)document.querySelector(" <CSS-selector-here> ")
                  1)NOTE: It takes CSS Selector. So if there is a class "box" then ".box" will be used  🛑🛑
                        document.querySelector(".box") 
                  2)This will NOT ❌ target all elements that match with ".box" CSS Selector but just the 1st one matched. If u want to target all elements the see 4) 👇
            4)document.querySelectorAll(" <CSS-selector-here> ")
                  1)This returns a NodeList of all nodes (Here, these nodes would be HTML elements) that match ".box" Selector
                  2)Although NodeList is not an Array, it is possible to iterate over it with forEach()
            5)document.getElementsByTagName("div")

      Some other functions
      1)element.matches(" <CSS-selector-here> ")
      3)element.closest(" <CSS-selector-here> ")
      3)elementA.contains(elementB) : gives true if elementA contains elementB

/**********Tut 70***********/
      Exercise : Change Box color Randomly using DOM

      Tip: To generate a random number b/w "min" & "max":
                  min + r(max - min)
            r = random num b/w 0 & 1 { 0 <= r <= 1}

/**********Tut 71***********/
      Continued - Walking the DOM
      [See what all of these do in enclosed notes]
      1)element.innerHTML
            1)You can access inner HTML using this
            2)U can also change inner HTML using this, pass the new HTML as a string
                  element.innerHTML = `<div class="NEWbox">I am NEW-Box</div>`
      2)element.innerText
      3)element.outerHTML
      4)element.tagName
      5)element.nodeName
            This is for all nodes (text, comment node etc) but ".tagName" only for Element nodes (i.e HTML element Nodes) 
      6)element.textContent
      7)element.hidden
      8)element.hasAttribute(" <any Attribute, say id, class, etc> ")
      9)element.getAttribute(...)
      9)element.setAttribute(...)
      10)element.attributes : gives all attributes (class, id, etc...)
      11)element.removeAttribute("<attribute to be removed>")
            eg: element.removeAttribute("class")
      12)document.designMode = "on" : Now u can edit the website 🙌
      13)data-* attribute : U can add this attribute to store some custom data which can then be accessed using "dataset" property in JS

            //In .html
            <div class="box" data-manga="OnePunchMan">I am Box</div>

            //In JS
            document.querySelector(".box").dataset
                  output : DOMStringMap {manga: 'OnePunchMan'}
            

      Inserting Elements in DOM
      Using JS To change the DOM is useful if you wish to change the webpage without reloading for the user 🌈🌈
      
      All the below 👇 methods take a node object (the new node to be inserted) as input.
      1).append(<a node object here>) : new element will be inserted at the end of jis bhi element me append kr rhe ho
      2).prepend()
      3).after()
      4).before()
      5).replaceWith()

           
      6).insertAdjacentHTML("<position>","<HTML Text>")
            eg: .insertAdjacentHTML("afterbegin","<div>Inserted in beginning</div>")
            1)This methods takes a HTML text as input (& NOT a Node object)
                  This would work : insertAdjacentHTML("afterbegin","<div>Inserted in beginning</div>") ✅
                  This won't work : insertAdjacentHTML("afterbegin", <a Node object> ); ❌
                  (See SupportedParams.jpg)
      7).insertAdjacentElement("<position>", <node object>)
      8).insertAdjacentText("<position>", "<Text>");
      9).remove()

      Other Things
      1).classList
            1).classList.add("<new-class-to-be-added>")
            2).classList.remove("<class-to-be-removed-from-classList>")
            3).classList.toggle("class-name") : if class in classList then removes it, if not then adds it
      2).className

/**********Tut 73***********/
      Exercise : Card Gen via JS

/**********Tut 74***********/
      JS Events
      1)Add event listeners to any element that can fire the events using "addEventListener()"
            element.addEventListener("click", () => {
                  alert("I was Clicked");
            });

            1)The Second function in "addEventListener()" can take an event-object ("e" in below ex.) as argument. An event-object represents an event that takes place in the DOM
                  element.addEventListener("keypress", (e) => {
                        console.log(e); //Logging the event object
                        console.log(e.key);
                  });
            
            2)Events can also be handled via HTML attribute (like "onload" etc...) but above method is preferred more. 🌄

      2)Event Bubbling : an event will bubble up to the parent elements.
            1)e.stopPropagation() : to stop the event propagation (e is an event object)

      Other Functions (Unrelated to Events)
      1)setInterval(<a function>, <Time in ms>) : If you want to run some code repeatedly after some time interval
      2)clearInterval() : to stop setInterval(...)

      3)setTimeout(<a function>, <Time in ms>) : If you want to run some code ONCE after some time interval
      4)clearTimeout() : to stop setTimeout(...)

/**********Tut 75 + Tut76***********/
      [Majorly Done From LB WebDev local saved Video for this topic : "82. JS DOM Class - 1.mp4" ]

      🟨🟨JS callbacks and promises🟨🟨

      1)Asynchronous programming is implemented in JS (say for functions that may take a long time to return their output)
            (Ref: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing)
      2)callback functions : callback functions are passed as arguments to other functions and then executed inside this outer function to perform some action.
            Tip : 1)callback functions are used to implement Asynchronous programming (like executing a callback once a time taking Asynchronous task completes)
                  2)Poor use of callbacks can lead to "JS Pyramid of Doom" 💩 (see : https://matcha.fyi/pyramid-of-doom-javascript/)
      3)promise : used to prevent "JS Pyramid of Doom" 🛡️. Let's see in more detail


            1)What is a Promise? 
                 A)It is used to execute some code parallely in background in JS.
                  The promise then tells if that code was executed successfully or not.
                       (i) promise resolved : if that code was executed successfully
                       (ii)promise rejected : if that code was NOT executed successfully (i.e some error occurred)
                 B)This code (inside the promise) can be a synchronus code OR asynchronous code 
                 c)Basically promise is a task that i wish to get completed parallely in background.
                   🌳Practical use case:
                        Say u are running a synchronus code & in b/w you made a network call. Ab is network call se dhere-dhere 🐌 data aega. So i wouldn't want to freeze the entire webpage (and frustrate 😡 the user) while this is happenning. So i will handle the network call asynchronously & parallely in background using a promise. The promise will tell me if the network call was successfull or not in the end (i.e data aa paya ya kuch gdbd ho gyi). (See "Event Loop" in JS from LB WebDev local saved Video "82. JS DOM Class - 1.mp4" )

            2)Syntax of a making a promise (basically we will make a promise object using a call to constructor of its class):

                        let meraPromise = new Promise(function(resolve, reject){
                              //Any code to be run parallely
                        });

                        Ex:
                        //Synchronus code inside promise (To be run parallely)
                        let meraPromise1 = new Promise(function(resolve, reject){
                              console.log('I am inside Promise1');
                        });

                        Here, "meraPromise1" is a promise object. 😊😊
            
            3)A promise object has following properties:
                  1)state : pending, fullfilled OR rejected
                  2)result : 
                        (i)promise resolved : result is a value
                              -use "then()" method promise object to work with value
                        (ii)promise rejected : result is an error
                              -use "catch()" / "then()" method of promise object to work with error

                              Tip: If your promise returns an error, u need to chain the then() & catch() methods, using them separately won't work bcz then() does not catch errors, so JS engine returns error ('ERR_UNHANDLED_REJECTION')

                                    ❌❌WRONG❌❌
                                    let p = new Promise(function(resolve, reject){
                                          reject("p rejected");
                                    })

                                    p.then((val)=>{
                                          console.log(val);
                                    })

                                    p.catch((err)=>{
                                          console.log(err);
                                    })

                                    ✅✅Correct✅✅
                                    let p = new Promise(function(resolve, reject){
                                          reject("p rejected");
                                    })

                                    p.then((val)=>{
                                          console.log(val);
                                    }).catch((err)=>{
                                          console.log(err);
                                    })


                  3)Promise chaining : Say we have promises P1, P2, P3
                        chain: P3's execution depends on successfull execution of P2 which itself depends on P1 i.e
                                    P3 --depends on--> P2 --depends on--> P1 
                        
                        Note: Here, aisa possible hai ki P1 browser me chla jaye and resolve ho jaye (but still P1 has NOT ❌ executed, it's in the browser) and therefore P2 ko execution start krne ka green signal 🟩 mil jaye. Same for P2 and P3

                  4)Promise API methods   
                        1)Promise.all()
                        2)Promise.allSettled()
                        2)Promise.race()
                         ...etc (Do from cwh Notes Chapter 9)



      🟨🟨Async - Await🟨🟨

      1)async- await is used when multiple promises depend on each other (same as P1, P2, P3 above but now say we have upto P50).
      2)Some points:
            (i)Any function can be made "async"
            (ii)async function returns a promise
            (iii)any function can be made "await"

      3)consider 3 promises P1, P2, P3. We want the following: 
            P3 --depends on--> P2 --depends on--> P1

            conditions:
            A)Jb tk P1 execute nhi ho jata, P2 start hi nhi hoga. Same for P2 and P3 (🔴 This condition was not there in "Promise chaining" eg. above)
            So, this is like a RELAY RACE 🏃‍♂️🏃‍♀️, jb tk pichla bnda flag nhi lata, agla bhag nhi skta!

            B)In such a situation, we can use async-await rather than multiple .then() (See "AsyncAwait.html" file)


      🟨🟨Fetch API🟨🟨

      1)API (Application Programming Interface) : an interface that facilitates the communication b/w different software components.
      2)fetch API is used to get / push something on the network.
      3)calls using fetch API:
            1)get call
                  Syntax: fetch("<some-url>"); 
                  Note that paid APIs might need more things in the get call (say Keys)
            2)Post call
                  Syntax: fetch("<some-url>", <an object containing additional things>);

                  Tip: Copy calls from "https://jsonplaceholder.typicode.com/guide/" 😁😁 

      🟨🟨Closures🟨🟨
      1)Say u have a nested function [eg: inner() inside of outer()], this nested function forms a closure.
      2)A closure is the combination of that nested function along with with REFERENCES to its surrounding state (its lexical environment).
        So, if inner() is now passed out from outer(), it will still work even though outer() has ended bcz inner() has references to the variables it needs (from its closure)


/**********Tut 78***********/
      Exercise : Hacking Simulator

/**********Tut 79***********/
      Error handling in JS
      1)throw <error-to-be-thrown>
            1)You can throw an error object using any of the 6 builtin error constructors:
                  SyntaxError
                  EvalError
                  RangeError
                  ReferenceError
                  TypeError
                  URIError

                  eg: throw SyntaxError("<Ur-error-msg-here>")
            
            2)You can also throw a custom error by making a custom error object and throwing that
                  eg: throw new Error("jhkb")

                  Tip: "new" in JS is used to make an object

      2)try-catch-finally block
            1)try-block ka code run hota hai, agr try-block me error throw hua to execution transferred to catch-block 
            2)finally-block:
                  1)Chahe try-block error throw kre ya na kre, (i.e catch-block pe execution aye ya na aye), last me finally-block zrur execute hota hai
                  2)🟢finally-block is mainly needed when we are inside functions
                    🟢When inside a function, we would want that the function to either "return" from within the try-block or from within the catch-block 
                    🟢So if we want to do something even when the "return" statement has been encountered in the function, we use finally-block

/**********Tut 80***********/
      OOPs in JS
      1)OOPs JS will not be used in beginner level projects
      2)Prototype of an object : gives additional properties to that object 
      3)"extends" keyword : used for inheritance
      4)-"super()" used to call the base class constructor
        -"super" keyword to access base class methods
                  eg : super.eats(); //To call eats() of super (base) class
      5)getters & setters (Not done in enough detail)
            Note: 🔻Syntax of getters & setters WRONG in cwh Notes chapter 11
      6)instanceof operator : to check if an object is of a particular class 
            1)Syntax : <object> instanceof <class>
            2)Note that an object is also an instance of its class's BASE class, so "true" returned in that case!

/**********Tut 82***********/
      Advanced JS

      IIFE
      1)An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined
      
      Destructring
      2)The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables
            eg: 1)Wiht arrays
                  let [x, y, ...rest] = [1,2,3,4,5,6,7]; {Note that 3 dots "..." are necessary}
                
                2)With objects
                  let boy = {
                        Name: "Rohan",
                        Age: 18,
                        weight: 60,
                  }

                  let {Name, weight} = boy;   .....Line(1)

                  Note: It should be "Name" & "weight" only (& no other variable name) to destructure those properties out of the object

      Spread operator
      1)Spread operator khol deta hai (symbolised with 3 dots "...")

      Hoisting
      1)Only works for "var" & not "let" & "const". [So not useful unless u are using "var" which u anyways should not 🤪]
      2)Hoisting : when the interpreter appears to move declarations of "var" (& NOT the definitions/Initializations) on the top of the block, so they can be used before they are declared (although value remains "undefined" until you reach the line where they are declared + initialized/defined as only declaration is hoisted to the top, like a flag 🚩)

      3)Hoisting can also do with functions (Pehle use krlo then declare + define)
       (But 🔴NOT if function is made with let/const (like const foo = function (x){...})


/**********Tut 83***********/
      JS Practice Questions
      1)Local Storage:
            1)You can store/ retrieve string "key" "value" pairs in the browsers local storage for a specific webpage
                  -localStorage.setItem("<key>", "<value>); {To set a pair}
                  -localStorage.getItem("<value>"); {To retrieve a pair if it exists}
            
            2)U can also store objects to local storage by converting them to string (JSON.stringify(<object>))
            2)You can view the local storage for a webpage in the "Application" tab of Dev Tools in edge
      2)Smooth Scroll (DIY)

/**********Tut 84***********/
      Project : Spotify Clone

/*********Tut 85***********/
      Starting backend Development using JavaScript 🎉🎉
      1)Now we will not be using JS to write scripts for the frontend (i.e no JS inside "script" tags in html) but rather using it as a programming language for programming the logic at the backend 
      2)This backend logic is intended to be run on our remote server that would be listening for requests from the clients (i.e web browsers sending requests to the remote server)
      3)Things that we will need
            1)Node.js : JavaScript's runtime environment (to run JS outside a web browser)
                  1)command to run the JS file via Node.js
                        node <path-to-js-file>
                        eg: (i) node "c:\Users\Geetansh\Desktop\WebDevCodes\Tut85\server.js"
                            (ii) node .\Tut85\server.js 
                            (Also works; "." means current directory, so navigate to the appropriate directory in the cmd prompt, say using "cd" command)
            2)npm(node package manager) : What will it do ❓
                  1)It is used to manage packages. So the flow goes something like this : 
                        1)run "node init" (or "npm init -y" to skip all the questions. You can later enter required details yourself in "package.json")
                              1)This command initializes your package. Say you are writing backend logic for your Spotify Clone. So the entire logic will go into a package. Let's call this package "spotify-clone" 
                              2)This command will make a "package.json" file in your folder
                              3)Then if you use any other packages via "npm install <package-name>", say you use "slugify", while writing your code, this means your package "spotify-clone" depends on "slugify". So "slugify" will be added as a dependency in your "package.json" file.
                              4)In effect, a folder "node_modules" will be made which will contain the code of "slugify"
                              4)Now when you share your package "spotify-clone" with someone, say you push your "spotify-clone" on github, you won't push the folder "node_modules". You would just have the dependencies listed in "package.json". (npm automatically adds the dependencies in "package.json" when you install a package via "npm install <package-name>" cmnd)
                              5)When someone else pulls your code, he can run "npm install" and all the dependencies listed in "package.json" will be installed in "node_modules" and your code will work as expected for him.
                              
            3)Express.js
                  1)A JS framework for making server side application. 
                  2)We will use it to ease our backend JS writing process. 
      
      4)To be able to use functions from a package, we somehow need to import it in our JS file. (see "server.js" file)
            1)I used "const slugify = require("slugify");" {I have the "slugify" package in my "node_modules" folder}

            📒Note: This is the old way, i am using "commonJS modules" here. See Tut86 for latest standard.

/********* 85.5 ************/
      [Done From LB WebDev local saved Video for this topic : "135. BD - Class 1 [HD].mp4" ]
      
      Basics of BackEnd & the Client - Server model 

      🌍 HTTP protocol 🌍
      1)One of the ways a client can interact with the server is through the HTTP protocol. 
        It Defines several methods for the client to interact with the server for some resource, called HTTP request methods. Some of these are:
        1)GET : to get a resource from the server
        2)PUT : to update some existing resource (say data) on server
        3)POST : to submit some NEW data on the server (so pehle se server pe nhi tha, ab kuch nya store hoga vahan pe)
        4)DELETE : to delete some resource (say data) from the server

        📒Note : HTTP methods like GET, PUT and DELETE are idempotent, while POST is generally non-idempotent. 

/*********Tut 86***********/
      🟩CommonJs Vs EcmaScript Modules 

      1)"npm i --global nodemon" : installs the "nodemon" package globally (& not for just the current project/ folder)
            1)So "nodemon" will not be in the dependencies list of "package.json". 
            2)If you want that someone using your package should have "nodemon" then included it in the dependencies list.
            3)Why it's needed? Because every time you make a change in your server.js file, you will have to kill the server and restart the server manually. Nodemon, on the other hand, automates this process, so whenever you make a change to your server.js file, it will automatically restart the server.

      2)Modules in JavaScript
            1)A module is a function or group of similar functions. They are grouped together within a file and contain the code to execute a specific task when called into a larger application. You create modules to better organize and structure your codebase.
            2)So, A module is a single JavaScript file that has some reasonable functionality. (So modules are libraries) 
                  ex: Circle.js, 
                      Rectangle.js, 
                      Square.js

      3)What are packages then?
            1)A package is one or more modules (libraries) grouped (or packaged) together.
            2)So, A package is a directory with one or more modules inside of it and a "package.json" file which has metadata about the package.
                  ex: You can get the package "Shapes" and have access to the Circle, Rectangle, and Square modules.

      4)2 major module systems : 
            1)CommonJS modules {using statements like --> const http = require("http"); }
            2)ECMAScript modules / ES6 modules {using statements like --> import http from "http" }

            🔴Tip : 1)ES6 modules is the latest standard so we will be usng this now!

                  2)If you only have a standalone JavaScript file, you can use either 1) or 2). However, if it's part of a package and includes a "package.json" file, then if you want to use ES6 modules, use the statement { "type": "module", } inside that "package.json". Otherwise, the default is CommonJS modules. 

                  3)Additionally, if you specify { "type": "module", } in "package.json" , your code will produce an error if you attempt to use CommonJS modules (by using statements like --> const http = require("http"); )
      
      
      🟩Default V/S Named Exports (See folder "ExportsInESModules")
    
      1)2 Ways to export "things" out of a module. These "things" can be anything - variables, functions, objects!
            1)Named export
            2)Default export

      

      🟩Using Modules with HTML files (See folder "usingModulesWithHTMLFiles" inside folder "ExportsInESModules")

      1)In index.html, i used
       <script type="module" src="../server.js"></script> 
       to get "server.js" module in the HTML (import statements will only work if the JS file is treated as a module, so {type="module"} is necessary)

      📒Note : 1) "server.js" imports stuff from "myModule2.js" located inside "usingModulesWithHTMLFiles" folder.
                  So, even though i only got "server.js" in "index.html", the browser automatically gets the exported stuff from "myModule2.js"
               2)Also, the path inside "server.js" to "myModule2.js" is relative to "server.js" and still the console in Browser is able to locate "myModule2.js". This means that for import statements, if relative path is provided, the browser takes it relative to the module that is importing. 
               This is unlike when relative path is given in fetch() calls in JS, where the relative path is resolved taking the url of the HTML page as the base url (So there, it's relative to the HTML file that loaded the JS, rather than relative to whatever the actual location of that JS file might be) 

      
      