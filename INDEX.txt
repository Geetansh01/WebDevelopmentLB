/******************Week 1*************************/
    L18 : HTML Basics
          1)HTML, Tags, comments
          2)HTML Text Element
                1)Block Element
                2)Inline Element
          3)Heading Tag
          4)paragraph Tag
          5)DIV tag
          6)Empty tag/ Self closing tag (eg: <br/> tag)
          7)List in HTML
                1)Ordered List
                2)Unordered List
                3)Description List
          8)Attributes in html Tags
          9)meta tag

/**********************CWH Starts*****************************/
/********Tut 1**************/
      1)Basic OverView
      2)FrontEnd
            -HTML
            -CSS
            -JavaScript
      3)FrontEnd FrameWorks to deploy JavaScript Quickly and Efficiently
            -React
            -NextJS
            -Angular
      3)BackEnd
            -django
            -flask
            -nodeJS
            -php
            -ruby on rails

/********Tut 3**************/
      How to view websites on your phone

/********Tut 5**************/
      1)Image Tag
            1)For the attribute of height & width, always set either 1 of them and the other will automatically adjust. 
            These will be later finetuned by css but setting 1 of them in html helps in reducing CLS (so better SEO).
            2)Values of width & height Attributes are in pixels 
      2)Table tag

/********Tut 6**************/
      1) 3 SEO Web Vitals
            -CLS (Cumulative layout Shift) 
            -LCD (Largest Contentful Paint) 
            -FID (First Input Delay)
            ref : https://web.dev/articles/vitals
            1)LightHouse Report

/********Tut 7**************/
      2)form tag

/********Tut 8**************/
      1)Inline and block Elements

/********Tut 9**************/
      1)Id & Class attributes 

/********Tut 10**************/
      2)audio, video, svg, iframe tags

/********Tut 11**************/
      Semantic tags

/********Tut 13**************/
      Exercise

/********Tut 13**************/
      1)HTML Entities
            &nbsp;
            &copy; etc..
      2)pre tag
      3)code tag

/********Tut 14**************/
      CSS starts
      1)style tag
      2)selectors

/********Tut 15**************/
      3 ways to add css to your HTML :
      1)Inline CSS
            -using style attribute
      2)Internal
      3)External

/********Tut 17**************/
      Selectors in CSS:
      1)Element Selector
      2)Class selector
      3)ID selector
      4)Child Selector
      5)Descendant Selector
      6)Universal Selector
      7)Pseudo Selector (pseudo class in CSS)
      8)attribute selector (Srch online)
      9)Pseudo-element selector (see Tut35)

/********Tut 18**************/
      CSS Box Model:
      1)Element, Padding, border, margin
      Tip: 1)Always set "box-sizing" to "border-box" to lay out elements. 
      This makes dealing with the sizes of elements much easier
      2)Margin collapse only happens to block elements

/********Tut 19**************/
      1)Fonts in CSS
            1)font-family - fallback fonts {Recommended to include a generic Font Family like "Times New Roman" Family}
            2)font-style, font-weight, font-size etc...
      2)Different text properties :
            1)text-decoration, text-transform, text-decoration-color etc.
            2)overflow, text-overflow, word-break etc.
            3)text-align etc.
      3)Google Fonts (https://fonts.google.com/)
      4)Colors in CSS
            Ways to represent colors in css
                  -color keywords
                  -HEX color codes
                  -RGB 
                  -RGBA
                  -HSL

/********Tut 20**************/
      Exercise

/********Tut 21**************/
      1)CSS Specificity and Cascade
            1)Cascade Algorithm : 
                  The cascade algorithm has 4 distinct stages : 
                  1)Position and order of appearance : for use when same types of selectors in conflict
                  2)Specificity: for use when different types of selectors in conflict
                        Order of specificity is:
                        Inline Style > ID Selector > Class or Attribute Selector > Element Selector > Universal Selector

                        Tip : 
                        1)Use the least specific selectors more often to style your HTML. That way you can easily override specific styles when needed with more specific selectors. 
                        2)As a consequence of Tip 1), you should use !important v.very sparingly in your code (as it would make debugging difficult)
                        3)To calculate specificity, assign a value to each part of the selector:

                              -Universal Selector: 0
                              -Element selectors and pseudo-elements: 1
                              -Class selectors, attribute selectors, and pseudo-classes: 10
                              -ID selectors: 100
                              -Inline styles: 1000
                              -!important : 10,000
                        Then, add up the values of all the parts in the selector.

                  3)Origin
                  4)Importance: some CSS rules are weighted more heavily than others, especially with the " !important " rule type

/********Tut 22**************/
      1)Measurement Units in CSS
            1)px 
            2)vw, vh
            3)em
            4)rem (root element : html)
            5)vmin, vmax
            6)% units (width: 50%; means 50% the width of parent element)
      2)min-height, min-width, max-height, max-width

/********Tut 23**************/
      CSS Display Properties:
      1)U can set "display: " style as:
            1)inline (To make block elements inline)
            2)inline-block

                  Tip : 1)Inline elements don't respect Top padding and Top margin. Use "inline-block" for that.
                  2)Inline elements don't respect width. Use "inline-block" for that.

            3)none
            4)flex (More details in flex-box Tutorial)
            5)grid
      2)visibility

/********Tut 24**************/
      1)Box Shadow syntax: " box-shadow: h-offset v-offset blur spread color inset; "
      2)Text Shadow syntax: " text-shadow: h-offset v-offset blur color; "
      3)outline, outline-offset
      4)border-radius

/********Tut 25**************/
      1)list styling using CSS
            Tip : 1)" list-style: " can make a ul list look like ol
                  2)A li will have the following display property
                        " display: list-item; "
                  This gives the li a "marker" and "text"
            
            1)list-style, list-style-position, list-style-type, list-style-image 
              (There was also a shorthand syntax!)
      2)Basic nav bar (Navigation bar)
      
/********Tut 26**************/
      1)More on CSS overflow
      2)overflow-x, overflow-y etc.
      3)white-space: nowrap;

/********Tut 29**************/
      Exercise

/********Tut 28**************/
      POsition in CSS
      1)position : relative, absolute, static
      2)position : absolute; 
        Tip: 1)Element will find it's nearest positioned parent (means any position except static position) and sit relative to it (in worst case, it sits relative to <html> element)
             2)WARNING : transform, filter, or perspective properties can also make an element appear as positioned 
      3)position : fixed (Used for Annoying ADs)
      3)position : sticky (Used for Nav Bar)

/**********Tut30************/
      Variables in CSS
      1):root{
            --color : rgb(195, 2, 195);
            --seccolor : rgb(179, 107, 179);
            etc...
        }
      Tip : Use this to quicly change the theme of website by setting GLOBAL variables (Say for primary and secondary colors)

/**********Tut31************/
      Media Queries in CSS
      1)Syntax : 
            @media not|only mediatype and (expressions) {
                  CSS-Code;
            }
      2)Most Common usage: 
            @media only screen and (max-width : 400px) {
                  CSS-Code;
            }       

/**********Tut34************/
      Exercise

/**********Tut34************/
      Float & Clear in CSS
      1)Flex-box has mostly reduced the usage of these styles today.
      2)float: right; (use "display: flow-root;" with container of floating element to account for overflow of floating element)
      3)clear: right/left/both

      Tip: Don't use float and clear 😂

/**********Tut35************/
      More on CSS Selectors
      1)pseudo-element Selector ( p::first-line{...}, ::selection, input::placeholder )
      2)One more way to use universal selector ( .boxes *{...} )
      3)Grouping Selectors("," separated)
      4).box:nth-child(odd), .box:nth-last-child(1) etc.
      5)Inserting pseudo-elements dynamically using CSS
            1)	.boxes::before{
				content: "Befooooooooooooooooooooooooore";
				background-color: blanchedalmond;
			}

                  This will insert pseudo-element before the main content of ".boxes"
            2).boxes::after{...}
      6).box::selection
      7)input tag

/**********Tut38************/
      Exercise

/**********Tut38************/
      CSS Flex Box
      1)Container Properties (Applied on the parent container containing the items) :
            1)To align elements in the centre, set the following styles to the " parent container "
                  display: flex;
                  justify-content: center;
                  align-items: center;
            
            Tip: Most of the times u will use Flex box to align in centre 😉

            2)Other options:
                  justify-content: flex-end, flex-start, space-between, space-around etc.
                  align-items: flex-start, flex-end,  etc.
            3)flex-direction: row, column, row-reverse, column-reverse 
            4)Axes in Flex box(can change depending on " flex-direction "):
                  1)Main Axis : Axis along which items are layed 
                  2)Cross Axis : Axis perpendicular to direction in which items are layed
            
            " justify-content " works along the main axis.
            5)Terminologies: Main start, Main end, Cross start, Cross end, Main size, Cross size
            6)flex-wrap: wrap;
            7)align-content: center; ( When content is wrapping in multiple lines(i.e "flex-direction is row" AND "flex-wrap is wrap" ) and needs to be centered along the Cross Axis).
            
                  Tip: There is NO " justify-items " in flex box 🙂
                  
            8)Shorthand to set "flex-direction" and "flex-wrap" :
                  flex-flow: <flex-direction> <flex-wrap>
                  eg. flex-flow: row wrap;
            9)gap, row-gap, col, column-gap
      
      2)Item Properties:
            1)order (jitna zyada order utna baad me element aega, default order is 0)
            2)flex-grow (Basically to fill the remaining space on the main axis)
            3)flex-shrink
            4)align-self

/**********Tut39************/
      CSS Grid
      1)Container Properties (Applied on the parent container containing the items) :
            1)grid-template-columns
                  Tip: 1)Insted of writing " grid-template-columns: 1fr 1fr 1fr ", write "grid-template-columns: repeat(3, 1fr); "
                  2)minmax(x, y) : a general function, multiple uses throughout CSS
            2)Terminologies : 
                  1)grid line, grid cell
                  2)grid track, grid area
                  3)grid-template-rows, grid-template-cloumns
            3)naming grid lines
            4)Two major ways to use grid:
                  1)Using grid rows and columns (and then placing items in the cells)
                  2)using grid areas
            5)fr (a unit, full form : fraction)
            6)gap, row-gap, column-gap
                  Tip: Don't use padding/ margin in flexbox or grid, use gap instead ✌
            7)justify-items (for horizontal), align-items (for vertical)
                  Tip: 1)shorthand: "place-items: center;" means "justify-items: center;" && "align-items: center;"😊 
            8)justify-content, align-content 
                  1)These are used to arrange the whole grid inside the grid container (rather than arranging the items inside the grid which is done by "justify-items", "align-items")
                  2)Useful when grid is smaller than the container containing the grid
                  4)shorthand: "place-content: center;" means "justify-content: center;" && "align-content: center;"    
                    similarly "place
      
      2)Item Properties:
            1)"grid-row-start: 1;"," grid-row-end: 2;", (Shorthand is " grid row: 1/2; ")
            2)grid-column-start, grid-column-end (shorthand is "grid column")
            3)align-self, justify-self (these apply to individual items in contrast to "align-items" and "justify-items" which apply to all the items in the grid)

/**********Tut41************/
      Exercise

/**********Tut42************/
      CSS Transforms
      1)transform: rotate(45deg) ( or rotate(0.25 turn) )
                                 ( or rotateX(45deg) similarly y and z axis)
      2)scale(1.2) (scaleX, similarly for y and z axis)
      3)skew(), skewX() (similarly skewY()) 
            Tip: NO skewZ() is there ❌
      4)translateX(100%) (100% means 100% of the width of the element on which translate is applied and NOT the width of parent!)
      5)Multiple transforms in one { transform: rotate(0.25turn) skewX(10deg) translateX(100%); }
      6)transform-origin

/**********Tut44************/
      Exercise

/**********Tut45************/
      CSS Transition property
      1)4 Different parts:
            transition-property: transform;
            transition-duration: 4s;
            transition-timing-function: ease-in-out;
            transition-delay: 1s;
      
      2)Shorthand to combine above 4
            transition: transform 4s ease-in-out 1s;

/**********Tut46************/
      CSS Animations
      1)Two synatxes to set keyframes of animation:
            1)
        @keyframes GeetanshKiAnimation{
            from{
                background-color: rgb(255, 0, 153);
            }
            to{
                background-color: blue;
                transform: translateX(1000px);
            }
        }

            2)
        @keyframes Animation2 {
            0%{
                transform: rotate(0deg);
            }
            20%{
                transform: rotate(90deg);
            }
            40%{
                transform: rotate(180deg);
            }
            60%{
                transform: rotate(270deg);
            }
            80%{
                transform: rotate(360deg);
            }
            100%{
                transform: rotate(0deg);
            }
        }

      2)There are many different properties for animation, like:
            animation-name: geetanshKiAnimation;
            animation-duration: 1s;
            animation-iteration-count: 2;
            animation-timing-function: ease-in-out;
            animation-delay: 1s;
            animation-direction: normal; (or alternate, reverse etc.)
            animation-play-state: paused; (We actually use JS to pause our Animations)
            animation-fill-mode: forwards; (used rarely 😁)


      3)Shorthand for above properties:
               animation: name duration timing-function delay iteration-count direction fill-mode;

      4)To apply multiple comma separated animation using shorthand:
                  animation: GeetanshKiAnimation 4s ease-in-out 1s infinite,
                             Animation2 4s ease-in-out 1s infinite;

/**********Tut48************/
      Exercise

/**********Tut49************/
      CSS Object fit and Object Cover
      1)object-fit: 
            -cover (Most Used)
            -contain (Most Used)
            -none
            -fill (default)
      2)object-position: 
            which part of image to show when unable to see full image:
                  -bottom left
                  -top right
                  -left etc.
                  -50% 50%
            
            Setting image's position whithin it's space
                  -10px 20px (right, top)

            Tip : use this with " object-fit: cover OR none" for desired effect 😊
      3)If you want to set image as a background (this also prevents noobs from being able to download the image 🤓)
            background: url( "Image URL Here" );
            background-position: top left; (top left means top left part of the image will be visible as background : useful when the entire image is too large)

            background-repeat: no-repeat; (or repeat-x, repeat-x)
            (when the image is small, it is repeated to fill the background, use this property to control that)

            background-clip: content-box; (OR border-box, padding-box)


